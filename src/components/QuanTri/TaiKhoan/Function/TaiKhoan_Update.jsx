import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import moment from 'moment';
import { fetchDataList, updateItemById } from '../../../utils/api/requestHelpers';
import { fetchAndSetList } from '../../../utils/api/fetchHelpers';
import '../../../utils/css/Custom-Update.css';

const { Option } = Select;

const EditUser = ({ userId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [accountData, setAccountData] = useState(null);
  const [roles, setRoles] = useState([]);

  useEffect(() => {
    if (userId) fetchAccountData(userId);
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/roles', setRoles, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch vai tr√≤');
  }, [userId]);

  const [originalPassword, setOriginalPassword] = useState('');

  const fetchAccountData = async (id) => {
    setFetchLoading(true);
    try {
      const allAccounts = await fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts');
      const account = allAccounts.find(item => item.ma_nguoi_dung === id);
      if (!account) throw new Error(`Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng∆∞·ªùi d√πng v·ªõi m√£: ${id}`);
      if (account.ngay_tao) account.ngay_tao = moment(account.ngay_tao);
      setAccountData(account);
      setOriginalPassword(account.mat_khau); // L∆∞u l·∫°i m·∫≠t kh·∫©u g·ªëc
      form.setFieldsValue(account);
      message.success(`ƒê√£ t·∫£i th√¥ng tin t√†i kho·∫£n ng∆∞·ªùi d√πng: ${account.ho_va_ten}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(error.message);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const payload = {
        ...values,
        ngay_tao: values.ngay_tao?.format('YYYY-MM-DD'),
      };
      if (values.mat_khau === originalPassword) {
        delete payload.mat_khau;
      }

      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);
      
      const response = await updateItemById(`https://dx.hoangphucthanh.vn:3000/warehouse/accounts/${userId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }
      
      message.success('C·∫≠p nh·∫≠t t√†i kho·∫£n ng∆∞·ªùi d√πng th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n ng∆∞·ªùi d√πng');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>
            Ch·ªânh s·ª≠a T√†i Kho·∫£n Ng∆∞·ªùi D√πng: {accountData?.ho_va_ten || userId}
          </h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="ma_nguoi_dung" label="M√£ ng∆∞·ªùi d√πng" rules={[{ required: true }]}>
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="ten_dang_nhap" label="T√™n ƒëƒÉng nh·∫≠p" rules={[{ required: true }]}>
                  <Input />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="mat_khau" label="M·∫≠t kh·∫©u" rules={[{ required: true }]}>
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="ho_va_ten" label="H·ªç v√† t√™n" rules={[{ required: true }]}>
                  <Input />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="vai_tro" label="Vai tr√≤" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn vai tr√≤">
                    {roles.map(role => (
                      <Option key={role.ma_vai_tro} value={role.ma_vai_tro}>
                        {role.vai_tro}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="email" label="Email">
                  <Input type="email" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="so_dien_thoai" label="S·ªë ƒëi·ªán tho·∫°i">
                  <Input type="number" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="ngay_tao" label="Ng√†y t·∫°o" rules={[{ required: true }]}>
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} disabled />
                </Form.Item>
              </Col>
            </Row>
            <div className="form-actions">
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>
                L∆∞u
              </Button>
              <Button icon={<CloseOutlined />} onClick={onCancel} danger>
                H·ªßy
              </Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default EditUser;
