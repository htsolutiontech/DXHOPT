import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import { dayjs } from '../../../../utils/format/dayjs-config';
import { fetchDataList, updateItemById } from '../../../../utils/api/requestHelpers';
import { fetchAndSetList } from '../../../../utils/api/fetchHelpers';
import '../../../../utils/css/Custom-Update.css';

const { Option } = Select;

const EditCustomerInteraction = ({ customer_interactionId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [customerinteractionData, setCustomerInteractionData] = useState(null);
  const [accounts, setAccounts] = useState([]);
  const [interaction_types, setInteraction_Types] = useState([]);

  // L·∫•y user hi·ªán t·∫°i t·ª´ localStorage
  const currentUser = JSON.parse(localStorage.getItem('userData') || '{}');

  useEffect(() => {
    if (customer_interactionId) fetchCustomerData(customer_interactionId);
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts', setAccounts, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/crm/interaction_types', setInteraction_Types, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i t∆∞∆°ng t√°c');
  }, [customer_interactionId]);

  const fetchCustomerData = async (id) => {
    setFetchLoading(true);
    try {
      const allCustomerInteractions = await fetchDataList('https://dx.hoangphucthanh.vn:3000/crm/customer-interactions');
      const customer_interaction = allCustomerInteractions.find(item => item.ma_tuong_tac_khach_hang === id);
      if (!customer_interaction) throw new Error(`Kh√¥ng t√¨m th·∫•y t∆∞∆°ng t√°c kh√°ch h√†ng v·ªõi m√£: ${id}`);
      // G√°n lu√¥n ng∆∞·ªùi c·∫≠p nh·∫≠t l√† user hi·ªán t·∫°i
      customer_interaction.nguoi_phu_trach = currentUser?.ma_nguoi_dung || undefined;

      setCustomerInteractionData(customer_interaction);
      form.setFieldsValue({
        ...customer_interaction,
        thoi_gian: customer_interaction.thoi_gian ? dayjs(customer_interaction.thoi_gian) : null,
      });      
      message.success(`ƒê√£ t·∫£i th√¥ng tin t∆∞∆°ng t√°c kh√°ch h√†ng: ${customer_interaction.ten_khach_hang}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(error.message);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const payload = {
        ...values,
        thoi_gian: values.thoi_gian?.format('YYYY-MM-DD HH:mm:ss'),
      };

      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);
      
      const response = await updateItemById(`https://dx.hoangphucthanh.vn:3000/crm/customer-interactions/${customer_interactionId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }
      
      message.success('C·∫≠p nh·∫≠t t∆∞∆°ng t√°c kh√°ch h√†ng th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t∆∞∆°ng t√°c kh√°ch h√†ng');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>
            Ch·ªânh s·ª≠a T∆∞∆°ng T√°c Kh√°ch H√†ng: {customerinteractionData?.ten_khach_hang || customer_interactionId}
          </h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="ma_tuong_tac_khach_hang" label="M√£ t∆∞∆°ng t√°c kh√°ch h√†ng" rules={[{ required: true }]}>
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={16}>
                <Form.Item name="ten_khach_hang" label="T√™n kh√°ch h√†ng" 
                  rules={[
                    { required: true, message: 'T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
                    {
                        pattern: /^[^a-z]+$/,
                        message: 'Kh√¥ng ƒë∆∞·ª£c ch·ª©a ch·ªØ th∆∞·ªùng (a‚Äìz)',
                    },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="nguoi_phu_trach" label="Ng∆∞·ªùi ph·ª• tr√°ch" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch">
                    {accounts.map(account => (
                      <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                        {account.ho_va_ten}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="loai_tuong_tac" label="Lo·∫°i t∆∞∆°ng t√°c" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn lo·∫°i t∆∞∆°ng t√°c">
                    {interaction_types.map(interaction_type => (
                      <Option key={interaction_type.ma_loai_tuong_tac} value={interaction_type.ma_loai_tuong_tac}>
                        {interaction_type.loai_tuong_tac}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="hinh_thuc_goi" label="H√¨nh th·ª©c g·ªçi" rules={[{ required: true }]}>
                  <Select>
                      <Option value="G·ªçi ƒë·∫øn">G·ªçi ƒë·∫øn</Option>
                      <Option value="G·ªçi ƒëi">G·ªçi ƒëi</Option>
                      <Option value="">Kh√°c</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="thoi_gian" label="Th·ªùi gian" rules={[{ required: true }]}>
                  <DatePicker format="DD/MM/YYYY HH:mm:ss" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Form.Item name="noi_dung_tuong_tac" label="N·ªôi dung">
              <Input.TextArea rows={3} />
            </Form.Item>
            <div className="form-actions">
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>
                L∆∞u
              </Button>
              <Button icon={<CloseOutlined />} onClick={onCancel} danger>
                H·ªßy
              </Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default EditCustomerInteraction;
