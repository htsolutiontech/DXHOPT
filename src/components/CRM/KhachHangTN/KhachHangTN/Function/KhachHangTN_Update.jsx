import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import { dayjs } from '../../../../utils/format/dayjs-config';
import { fetchDataList, updateItemById } from '../../../../utils/api/requestHelpers';
import { getVietnamProvinces } from '../../../../utils/format/location';
import { fetchAndSetList } from '../../../../utils/api/fetchHelpers';
import '../../../../utils/css/Custom-Update.css';

const { Option } = Select;

const EditPotentialCustomer = ({ potential_customerId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [potentialcustomerData, setPotentialCustomerData] = useState(null);
  const [accounts, setAccounts] = useState([]);
  const [sources, setSources] = useState([]);
  const [customer_groups, setCustomer_Groups] = useState([]);

  // L·∫•y user hi·ªán t·∫°i t·ª´ localStorage
  const currentUser = JSON.parse(localStorage.getItem('userData') || '{}');

  useEffect(() => {
    if (potential_customerId) fetchCustomerData(potential_customerId);
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts', setAccounts, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/crm/opportunity-sources', setSources, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ngu·ªìn c∆° h·ªôi');
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/crm/customer-groups', setCustomer_Groups, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√≥m kh√°ch h√†ng ti·ªÅm nƒÉng ti·ªÅm nƒÉng');
  }, [potential_customerId]);

  const fetchCustomerData = async (id) => {
    setFetchLoading(true);
    try {
      const allPotentialCustomers = await fetchDataList('https://dx.hoangphucthanh.vn:3000/crm/potential-customers');
      const potential_customer = allPotentialCustomers.find(item => item.ma_khach_hang_tiem_nang === id);
      if (!potential_customer) throw new Error(`Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ti·ªÅm nƒÉng v·ªõi m√£: ${id}`);
      // G√°n lu√¥n ng∆∞·ªùi c·∫≠p nh·∫≠t l√† user hi·ªán t·∫°i
      potential_customer.nguoi_phu_trach = currentUser?.ma_nguoi_dung || undefined;

      setPotentialCustomerData(potential_customer);
      form.setFieldsValue({
        ...potential_customer,
        ngay_lien_lac_tiep_theo: potential_customer.ngay_lien_lac_tiep_theo ? dayjs(potential_customer.ngay_lien_lac_tiep_theo) : null,
        ngay_them_vao: potential_customer.ngay_them_vao ? dayjs(potential_customer.ngay_them_vao) : null,
      });      
      message.success(`ƒê√£ t·∫£i th√¥ng tin kh√°ch h√†ng ti·ªÅm nƒÉng: ${potential_customer.ten_khach_hang}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(error.message);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const payload = {
        ...values,
        ngay_them_vao: values.ngay_them_vao?.format('YYYY-MM-DD'),
        ngay_lien_lac_tiep_theo: values.ngay_lien_lac_tiep_theo?.format('YYYY-MM-DD'),
      };

      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);
      
      const response = await updateItemById(`https://dx.hoangphucthanh.vn:3000/crm/potential-customers/${potential_customerId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }
      
      message.success('C·∫≠p nh·∫≠t kh√°ch h√†ng ti·ªÅm nƒÉng th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√°ch h√†ng ti·ªÅm nƒÉng');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>
            Ch·ªânh s·ª≠a Kh√°ch H√†ng Ti·ªÅm NƒÉng: {potentialcustomerData?.ten_khach_hang || potential_customerId}
          </h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="ma_khach_hang_tiem_nang" label="M√£ kh√°ch h√†ng ti·ªÅm nƒÉng ti·ªÅm nƒÉng" rules={[{ required: true }]}>
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={16}>
                <Form.Item name="ten_khach_hang" label="T√™n kh√°ch h√†ng ti·ªÅm nƒÉng" 
                  rules={[
                    { required: true, message: 'T√™n kh√°ch h√†ng ti·ªÅm nƒÉng ti·ªÅm nƒÉng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
                    {
                        pattern: /^[^a-z]+$/,
                        message: 'Kh√¥ng ƒë∆∞·ª£c ch·ª©a ch·ªØ th∆∞·ªùng (a‚Äìz)',
                    },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="nguoi_phu_trach" label="Ng∆∞·ªùi ph·ª• tr√°ch" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch">
                    {accounts.map(account => (
                      <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                        {account.ho_va_ten}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="hanh_dong_tiep_theo" label="H√†nh ƒë·ªông ti·∫øp theo" >
                  <Select>
                      <Option value="G·ª≠i email Marketing">G·ª≠i email Marketing</Option>
                      <Option value="M·ªùi tham gia s·ª± ki·ªán">M·ªùi tham gia s·ª± ki·ªán</Option>
                      <Option value="H·∫πn g·∫∑p t∆∞ v·∫•n tr·ª±c ti·∫øp">H·∫πn g·∫∑p t∆∞ v·∫•n tr·ª±c ti·∫øp</Option>
                      <Option value="G·ªçi ƒëi·ªán x√°c nh·∫≠n nhu c·∫ßu">G·ªçi ƒëi·ªán x√°c nh·∫≠n nhu c·∫ßu</Option>
                      <Option value="Theo d√µi ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng ti·ªÅm nƒÉng">Theo d√µi ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng ti·ªÅm nƒÉng</Option>
                      <Option value="G·ª≠i b√°o gi√°">G·ª≠i b√°o gi√°</Option>
                      <Option value="Demo s·∫£n ph·∫©m">Demo s·∫£n ph·∫©m</Option>
                      <Option value="ƒê√†m ph√°n h·ª£p ƒë·ªìng">ƒê√†m ph√°n h·ª£p ƒë·ªìng</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="ngay_lien_lac_tiep_theo" label="Ng√†y li√™n l·∫°c ti·∫øp theo" >
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="so_lan_da_lien_lac" label="S·ªë l·∫ßn ƒë√£ li√™n l·∫°c" rules={[{ required: true }]}>
                  <InputNumber style={{ width: '100%' }} />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="muc_dich" label="M·ª•c ƒë√≠ch" >
                  <Select>
                      <Option value="Thuy·∫øt ph·ª•c kh√°ch h√†ng ti·ªÅm nƒÉng ra quy·∫øt ƒë·ªãnh">Thuy·∫øt ph·ª•c kh√°ch h√†ng ti·ªÅm nƒÉng ra quy·∫øt ƒë·ªãnh</Option>
                      <Option value="Gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi">Gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi</Option>
                      <Option value="T·∫°o ni·ªÅm tin v√† gi·∫£i th√≠ch l·ª£i √≠ch">T·∫°o ni·ªÅm tin v√† gi·∫£i th√≠ch l·ª£i √≠ch</Option>
                      <Option value="Ch·ªët ƒë∆°n h√†ng v√† k√Ω h·ª£p ƒë·ªìng">Ch·ªët ƒë∆°n h√†ng v√† k√Ω h·ª£p ƒë·ªìng</Option>
                      <Option value="X√°c nh·∫≠n ng√¢n s√°ch & kh·∫£ nƒÉng mua h√†ng">X√°c nh·∫≠n ng√¢n s√°ch & kh·∫£ nƒÉng mua h√†ng</Option>
                      <Option value="Kh√°m ph√° nhu c·∫ßu kh√°ch h√†ng ti·ªÅm nƒÉng">Kh√°m ph√° nhu c·∫ßu kh√°ch h√†ng ti·ªÅm nƒÉng</Option>
                      <Option value="ƒê·ªãnh h∆∞·ªõng gi·∫£i ph√°p c·ª• th·ªÉ">ƒê·ªãnh h∆∞·ªõng gi·∫£i ph√°p c·ª• th·ªÉ</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="nhom_khach_hang" label="Nh√≥m kh√°ch h√†ng ti·ªÅm nƒÉng" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn nh√≥m kh√°ch h√†ng ti·ªÅm nƒÉng">
                    {customer_groups.map(customer_group => (
                      <Option key={customer_group.ma_nhom_khach_hang} value={customer_group.ma_nhom_khach_hang}>
                        {customer_group.nhom_khach_hang}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="nguon_tiep_can" label="Ngu·ªìn ti·∫øp c·∫≠n" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ngu·ªìn ti·∫øp c·∫≠n">
                    {sources.map(source => (
                      <Option key={source.ma_nguon} value={source.ma_nguon}>
                        {source.nguon}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="tinh_trang" label="T√¨nh tr·∫°ng" rules={[{ required: true }]}>
                  <Select>
                      <Option value="T√≠ch c·ª±c">T√≠ch c·ª±c</Option>
                      <Option value="B√¨nh th∆∞·ªùng">B√¨nh th∆∞·ªùng</Option>
                      <Option value="Kh√≥ ch·ªãu">Kh√≥ ch·ªãu</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="ngay_them_vao" label="Ng√†y th√™m" rules={[{ required: true }]}>
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item name="email" label="Email" >
                  <Input type="email" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="so_dien_thoai" label="SƒêT" >
                  <Input />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item name="tinh_thanh" label="T·ªânh th√†nh">
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn t·ªânh th√†nh">
                    {getVietnamProvinces().map(province => (
                      <Option key={province} value={province}>{province}</Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="website" label="Website">
                  <Input />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="dia_chi_cu_the" label="ƒê·ªãa ch·ªâ c·ª• th·ªÉ">
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Form.Item name="ghi_chu" label="Ghi ch√∫">
              <Input.TextArea rows={3} />
            </Form.Item>
            <div className="form-actions">
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>
                L∆∞u
              </Button>
              <Button icon={<CloseOutlined />} onClick={onCancel} danger>
                H·ªßy
              </Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default EditPotentialCustomer;
